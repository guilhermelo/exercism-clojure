(defn factorial-calc [number]
  (loop [n number
         factorial 0]
    (when (= n 1)
      fatorial)
    (recur (dec n) (n * (dec n)))))
(defn factorial-calc [number]
  (loop [n number
         factorial 0]
    (when (= n 1)
      factorial)
    (recur (dec n) (n * (dec n)))))
(factorial-calc 1)
(defn factorial-calc [number]
  (loop [n number
         factorial 0]
    (prn n)
    (when (= n 1)
      factorial)
    (recur (dec n) (n * (dec n)))))
(factorial-calc 1)
(defn factorial-calc [number]
  (loop [n number
         factorial 0]
    (prn n)
    (when (= n 1)
      factorial)
    (recur (dec n) (* n (dec n)))))
(factorial-calc 1)
(defn factorial-calc [number]
  (loop [n number
         factorial 0]
    (prn n)
    (Thread/sleep 2000)
    (when (= n 1)
      factorial)
    (recur (dec n) (* n (dec n)))))
(factorial-calc 1)
(defn factorial-calc [number]
  (loop [n number
         factorial 0]
    (prn n)
    (prn "Teste:" (= n 1))
    (Thread/sleep 2000)
    (when (= n 1)
      factorial)
    (recur (dec n) (* n (dec n)))))
(factorial-calc 1)
(defn factorial-calc [number]
  (loop [n number
         factorial 0]
    (prn n)
    (prn "Teste:" (= n 1))
    (Thread/sleep 2000)
    (if (= n 1)
      factorial
      (recur (dec n) (* n (dec n))))))
(factorial-calc 1)
((fn [number]
   (loop [n number
          factorial 0]
     (if (= n 1)
       factorial
       (recur (dec n) (* n (dec n)))))) 1)
((fn [number]
   (loop [n number
          factorial 1]
     (if (= n 1)
      (recur (dec n) (* n (dec n)))))) 1)
((fn [number]
   (loop [n number
          factorial 1]
     (if (= n 1)
       factorial
      (recur (dec n) (* n (dec n)))))) 1)
((fn [number]
   (loop [n number
          factorial 1]
     (if (= n 1)
       factorial
      (recur (dec n) (* n (dec n)))))) 3)
((fn [number]
   (loop [n number
          factorial 1]
     (prn (* n (- n 1)))
     (if (= n 0)
       0
       (if (= n 1)
         factorial
         (recur (- n 1) (* n (- n 1))))))) 3)
((fn [number]
   (loop [n number
          factorial 1]
     (prn "Calculo: " (* n (- n 1)))
     (if (= n 0)
       0
       (if (= n 1)
         factorial
         (recur (- n 1) (* n (- n 1))))))) 3)
((fn [number]
   (loop [n number
          factorial 1]
     (prn "N:" n)
     (prn "Calculo: " (* n (- n 1)))
     (if (= n 0)
       0
       (if (= n 1)
         factorial
         (recur (- n 1) (* n (- n 1))))))) 3)
((fn [number]
   (loop [n number
          factorial 1]
     (prn "N:" n)
     (prn "Calculo: " (* n (- n 1)))
     (if (= n 0)
       0
       (if (= n 1)
         factorial
         (recur (- n 1) (* factorial (* n (- n 1)))))))) 3)
((fn [number]
   (loop [n number
          factorial n]
     (if (= n 0)
       0
       (if (= n 1)
         factorial
         (recur (- n 1) (* factorial (- n 1))))))) 3)
((fn [number]
   (loop [n number
          factorial n]
     (if (= n 0)
       0
       (if (= n 1)
         factorial
         (recur (- n 1) (* factorial (- n 1))))))) 5)
((fn [number]
   (loop [n number
          factorial n]
     (if (= n 0)
       0
       (if (= n 1)
         factorial
         (recur (- n 1) (* factorial (- n 1))))))) 8)
((fn [elements]
  (loop [sequence elements
         new-sequence '()]
    (if (empty? sequence)
      (do 
        (cons (first sequence) new-sequence)
        (cons (first sequence) new-sequence))
      (recur (rest elements) (inc item))))) [1 2 3])
((fn [elements]
  (loop [sequence elements
         new-sequence '()]
    (if (empty? sequence)
      (do 
        (cons (first sequence) new-sequence)
        (cons (first sequence) new-sequence))
      (recur (rest elements) new-sequence)))) [1 2 3])
((fn [elements]
   (loop [sequence elements
          new-sequence '()]
     (if (empty? sequence)
       new-sequence
       (do
         (recur (rest sequence) (->> new-sequence
                                     (cons (first sequence))
                                     (cons (first sequence)))))))) [1 2 3])
((fn [elements]
   (loop [sequence elements
          new-sequence '()]
     (if (empty? sequence)
       (reverse new-sequence)
       (do
         (recur (rest sequence) (->> new-sequence
                                     (cons (first sequence))
                                     (cons (first sequence)))))))) [1 2 3])
((fn [elements]
   (loop [sequence elements
          new-sequence '()]
     (if (empty? sequence)
       (reverse new-sequence)
       (do
         (recur (rest sequence) (->> new-sequence
                                     (cons (first sequence))
                                     (cons (first sequence)))))))) [:a :a :b :b])
((fn [elements]
   (loop [sequence elements
          new-sequence '()]
     (if (empty? sequence)
       (reverse new-sequence)
       (do
         (recur (rest sequence) (->> new-sequence
                                     (cons (first sequence))
                                     (cons (first sequence)))))))) [[1 2] [3 4]])
(for [x (range 40)
            :when (= 1 (rem x 4))]
        x)
(rem 1 4)
(rem 2 4)
(for [x (range 40)
            :when (= 1 (rem x 4))]
        x)
(apply str ("L" "e" "r" "o" "y"))
(apply str '("L" "e" "r" "o" "y"))
((fn [sequence]
  (loop [original (into '() sequence)
         atual '()]
    (if (empty? original)
      atual
      (if (= (first original) (first atual))
        (recur (rest original) atual)
        (recur (rest original) (cons (first sequence) atual)))))) '(1 2 3 2 3))
((fn [sequence]
  (loop [original (into '() sequence)
         atual '()]
    (prn "Original: "(first original))
    (prn "Atual: " (first original))
    (if (empty? original)
      atual
      (if (= (first original) (first atual))
        (recur (rest original) atual)
        (recur (rest original) (cons (first sequence) atual)))))) '(1 2 3 2 3))
((fn [sequence]
  (loop [original (into '() sequence)
         atual '()]
    (prn "Original: " original)
    (prn "Atual: " atual)
    (if (empty? original)
      atual
      (if (= (first original) (first atual))
        (recur (rest original) atual)
        (recur (rest original) (cons (first sequence) atual)))))) '(1 2 3 2 3))
((fn [sequence]
  (loop [original (into [] sequence)
         atual '()]
    (prn "Original: " original)
    (prn "Atual: " atual)
    (if (empty? original)
      atual
      (if (= (first original) (first atual))
        (recur (rest original) atual)
        (recur (rest original) (cons (first sequence) atual)))))) '(1 2 3 2 3))
((fn [sequence]
  (loop [original (into '() sequence)
         atual '()]
    (prn "Original: " original)
    (prn "Atual: " atual)
    (if (empty? original)
      atual
      (if (= (first original) (first atual))
        (recur (rest original) atual)
        (recur (rest original) (cons (first sequence) atual)))))) '(1 2 3 2 3))
((fn [sequence]
  (loop [original (into '() sequence)
         atual '()]
    (prn "Original: " original)
    (prn "Atual: " atual)
    (if (empty? original)
      atual
      (if (contains? atual (first original))
       (recur (rest original) atual)
        (recur (rest original) (cons (first sequence) atual)))))) '(1 2 3 2 3))
((fn [sequence]
  (loop [original (into '() sequence)
         atual '()]
    (prn "Original: " original)
    (prn "Atual: " atual)
    (if (empty? original)
      atual
      (if (and (not-every? atual) (contains? atual (first original))) 
       (recur (rest original) atual)
        (recur (rest original) (cons (first sequence) atual)))))) '(1 2 3 2 3))
((fn [sequence]
  (loop [original (into '() sequence)
         atual '()]
    (prn "Original: " original)
    (prn "Atual: " atual)
    (if (empty? original)
      atual
      (if (and (not-empty atual) (contains? atual (first original))) 
       (recur (rest original) atual)
        (recur (rest original) (cons (first sequence) atual)))))) '(1 2 3 2 3))
((fn [sequence]
  (loop [original (into '() sequence)
         atual '()]
    (prn "Original: " original)
    (prn "Atual: " atual)
    (if (empty? original)
      atual
      (if (and (not-empty atual) (contains? atual (first original))) 
       (recur (rest original) atual)
        (recur (rest original) (conj (first sequence) atual)))))) '(1 2 3 2 3))
((fn [sequence]
   (set sequence)) [1 2 1 2 3 4])
((fn [sequence]
   (set sequence)) [1 2 1 2 3 4])
((fn [sequence]
   (set sequence)) [1 2 1 2 3 4])
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (prn "Original: " original)
     (prn "Atual: " atual)
     (if (empty? original)
       atual
       (if (empty? atual)
         (recur (rest original) (conj (first sequence) atual))
         (if (contains? atual (first original))
           (recur (rest original) atual)
           (recur (rest original) (conj (first sequence) atual))))))) '(1 2 3 2 3))
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (prn "Original: " original)
     (prn "Atual: " atual)
     (if (empty? original)
       atual
       (if (empty? atual)
         (recur (rest original) (conj atual (first sequence)))
         (if (contains? atual (first original))
           (recur (rest original) atual)
           (recur (rest original) (conj atual (first sequence)))))))) '(1 2 3 2 3))
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (prn "Original: " original)
     (prn "Atual: " atual)
     (if (empty? original)
       atual
       (if (empty? atual)
         (recur (rest original) (conj atual (first sequence)))
         (if (some  (partial = (first original)) atual)
           (recur (rest original) atual)
           (recur (rest original) (conj atual (first sequence)))))))) '(1 2 3 2 3))
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (if (empty? original)
       atual
       (if (some  (partial = (first original)) atual)
         (recur (rest original) atual)
         (recur (rest original) (cons atual (first sequence))))))) '(1 2 3 2 3))
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (if (empty? original)
       atual
       (if (some  (partial = (first original)) atual)
         (recur (rest original) atual)
         (recur (rest original) (cons (first sequence) atual)))))) '(1 2 3 2 3))
(def original [1 2 3])
(def atual [1])
(some (partial = (first original)) atual)
(def original [2 3])
(some (partial = (first original)) atual)
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (if (empty? original)
       atual
       (if (some  (partial = (first original)) atual)
         (recur (rest original) atual)
         (recur (rest original) (cons (first original) atual)))))) '(1 2 3 2 3))
         (recur (rest original) (cons (first original) atual)))))) "Leeeeeerrroyyy")
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (if (empty? original)
       atual
       (if (some  (partial = (first original)) atual)
         (recur (rest original) atual)
         (recur (rest original) (cons (first original) atual)))))) "Leeeeeerrroyyy")
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (if (empty? original)
       atual
       (if (some  (partial = (first original)) atual)
         (recur (rest original) atual)
         (recur (rest original) (cons (first original) atual)))))) '([1 2] [3 4] [1 2]))
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (if (empty? original)
       atual
       (if (= (first original) (first atual))
        (recur (rest original) atual)
         (recur (rest original) (cons (first original) atual)))))) '([1 2] [3 4] [1 2]))
((fn [sequence]
   (loop [original (into '() sequence)
          atual '()]
     (if (empty? original)
       atual
       (if (= (first original) (first atual))
        (recur (rest original) atual)
         (recur (rest original) (cons (first original) atual)))))) [[1 2] [1 2] [3 4] [1 2]])
((fn [initial final]
   (loop [ini initial
          final-sequence '()]
     (prn final-sequence)
     (if (= ini final)
       final-sequence
       (recur ini (conj final-sequence (inc ini)))))) 0 4)
((fn [initial final]
   (loop [ini initial
          final-sequence '()]
     (prn final-sequence)
     (if (= ini final)
       final-sequence
       (recur (inc ini) (conj final-sequence ini))))) 0 4)
((fn [initial final]
   (loop [ini initial
          final-sequence '()]
     (prn final-sequence)
     (if (= ini final)
       final-sequence
       (recur (inc ini) (cons ini final-sequence))))) 0 4)
((fn [initial final]
   (loop [ini initial
          final-sequence '()]
     (prn final-sequence)
     (if (= ini final)
       (reverse final-sequence)
       (recur (inc ini) (cons ini final-sequence))))) 0 4)
